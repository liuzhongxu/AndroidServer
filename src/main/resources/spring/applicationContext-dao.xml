<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"

	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd

        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd


        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/jdbc 
        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd       
    	http://www.springframework.org/schema/tx
    	http://www.springframework.org/schema/tx/spring-tx.xsd       
        ">
	<!--注解扫描器  -->
	<context:annotation-config />
	<context:component-scan base-package="com.test.demo">
	</context:component-scan>

	<!-- 加载数据源配置 -->
	<context:property-placeholder location="classpath:db.properties"/>
	<!-- 配置dataSource 使用dbcp连接池-->
	<bean 		id="dataSource" 		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" 	value="${jdbc.driverClass}" />
		<property name="url" 	value="${jdbc.jdbcUrl}" />
		<property name="username" 	value="${jdbc.user}" />
		<property name="password" 	value="${jdbc.password}" />
		<!-- 设置数据库连接池的最大连接数 -->
        <property name="maxActive" value="${jdbc.maxPoolSize}" />
        <!-- 设置数据库连接池的初始化连接数 -->
        <property name="initialSize" value="${jdbc.initPoolSize}" />
	</bean>

	<bean
		id="sqlSessionFactory" 	class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--dataSource属性指定要用到的连接池 -->
		<property 	name="dataSource" 	ref="dataSource" />
		<!--configLocation属性指定mybatis的核心配置文件 -->
		<property
			name="configLocation"  value="classpath:mybatis/mybatis_config.xml" />
		<!-- mapper扫描 -->
		<property name="mapperLocations" value="classpath:mybatis/mapping/*.xml"></property>

	</bean>
	<!--注册UserMapper映射  -->
<!-- 	<bean
		id="userMapper" 	class="org.mybatis.spring.mapper.MapperFactoryBean">
		sqlSessionFactory属性指定要用到的SqlSessionFactory实例
		<property name="sqlSessionFactory" 	ref="sqlSessionFactory" />
		mapperInterface属性指定映射器接口，用于实现此接口并生成映射器对象
		<property name="mapperInterface" value="com.ssm.demo2.mapper.UserMapper"/>
	</bean> -->
	
	<!-- mybatis自动扫描包下的mapper -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.test.demo.mapper" />
        <!-- optional unless there are multiple session factories defined -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

	<!-- 事物处理 -->
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* com.test.demo.service..*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>

	<!-- 事务管理 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception" />
			<!-- select,count开头的方法,开启只读,提高数据库访问性能 -->
			<tx:method name="select*" read-only="true"/>
			<tx:method name="count*" read-only="true"/>
			<!-- 对其他方法 使用默认的事务管理 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>


	<!-- 数据库的事务管理器配置 -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 使用annotation定义数据库事务，这样可以在类或方法中直接使用@Transactional注解来声明事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
</beans>